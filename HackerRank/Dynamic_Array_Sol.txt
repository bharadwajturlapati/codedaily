import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Solution {

    // Complete the dynamicArray function below.
    static List<Integer> dynamicArray(int n, List<List<Integer>> queries) {
        // create n empty lists.
        List<List<Integer>> calculationList = new ArrayList<>();
        getEmptyLists(calculationList, n);
        //add last answer to the result. after each computation   
        int lastAnswer = 0;
        // create list result;
        List<Integer> result = new ArrayList<>();
        
        // iterate through the queries
        for (int i = 0; i < queries.size(); i++) {
            // process each queries
            // check if its starts with 1 or 0
            List<Integer> q = queries.get(i);
            
            // if 1
            if (q.get(0) == 1) {
                // get an empty calculation list, at [algorithmic index] 
                // then add another list to the list[from queries list] to the new list
                // no manipulation of last answer
                calculationList.get((q.get(1) ^ lastAnswer) % n).add(q.get(2));
                System.out.println(lastAnswer);
            } else {
                // if the query is 2 
                // get the list from the query list with index[calculated algorthically]
                List<Integer> seq = calculationList.get((q.get(1) ^ lastAnswer) % n);
                // in that list get another [element] 
                lastAnswer = seq.get(q.get(2) % seq.size());
                // add that to result
                result.add(lastAnswer);
            }
            // in the first op, there is an increment in the calculation list
            // in the second op there is the computation of result.
        }
        return result;
    }
    
    static void getEmptyLists(List<List<Integer>> calcList, final int n){
        for(int i = 0; i<n; i++){
            List<Integer> emptyList = new ArrayList<>();
            calcList.add(emptyList);
        }
    }
    
    static int calculateXor(){
        return 0;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nq = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(nq[0]);

        int q = Integer.parseInt(nq[1]);

        List<List<Integer>> queries = new ArrayList<>();

        IntStream.range(0, q).forEach(i -> {
            try {
                queries.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        List<Integer> result = dynamicArray(n, queries);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
